<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\vs\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="16.0">
 <Targets>
  <Target Name="D:\Yuri\myPRG\mySCA2\bin\Release\ASTA.exe">
   <Modules>
    <Module Name="asta.exe">
     <Namespaces>
      <Namespace Name="ASTA">
       <Types>
        <Type Name="WinFormASTA" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AboutSoft()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2" File="Form1.cs" Line="650">Object 'aboutBox' can be disposed more than once in method 'WinFormASTA.AboutSoft()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 650</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="bmp" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2" File="Form1.Designer.cs" Line="16">'WinFormASTA' contains field 'WinFormASTA.bmp' that is of IDisposable type: 'Bitmap'. Change the Dispose method on 'WinFormASTA' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadGroupMembersFromDbToDataTable(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2" File="Form1.cs" Line="3939">The query string passed to 'SQLiteCommand.SQLiteCommand(string, SQLiteConnection)' in 'WinFormASTA.LoadGroupMembersFromDbToDataTable(string)' could contain the following variables 'namePointedGroup'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeFormMailing()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2" File="Form1.cs" Line="5793">Object 'sqlConnection' can be disposed more than once in method 'WinFormASTA.MakeFormMailing()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 5793</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateAmountAndRecepientOfPeopleGroupDescription()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2" File="Form1.cs" Line="2729">The query string passed to 'SQLiteCommand.SQLiteCommand(string, SQLiteConnection)' in 'WinFormASTA.UpdateAmountAndRecepientOfPeopleGroupDescription()' could contain the following variables 'Local31', 'group.GroupName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2" File="Form1.cs" Line="2734">The query string passed to 'SQLiteCommand.SQLiteCommand(string, SQLiteConnection)' in 'WinFormASTA.UpdateAmountAndRecepientOfPeopleGroupDescription()' could contain the following variables 'group.Emails', 'group.GroupName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2" File="Form1.cs" Line="2677">The query string passed to 'SQLiteCommand.SQLiteCommand(string, SQLiteConnection)' in 'WinFormASTA.UpdateAmountAndRecepientOfPeopleGroupDescription()' could contain the following variables 'grp'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ASTA.Classes">
       <Types>
        <Type Name="DbUpgradeException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'DbUpgradeException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MySqlDbReader" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="sqlCommand" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="161">'MySqlDbReader' contains field 'MySqlDbReader.sqlCommand' that is of IDisposable type: 'MySqlCommand'. Change the Dispose method on 'MySqlDbReader' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="sqlConnection" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="161">'MySqlDbReader' contains field 'MySqlDbReader.sqlConnection' that is of IDisposable type: 'MySqlConnection'. Change the Dispose method on 'MySqlDbReader' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetData(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="152">The query string passed to 'MySqlCommand.MySqlCommand(string, MySqlConnection)' in 'MySqlDbReader.GetData(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SqlDbReader" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="sqlCommand" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="57">'SqlDbReader' contains field 'SqlDbReader.sqlCommand' that is of IDisposable type: 'SqlCommand'. Change the Dispose method on 'SqlDbReader' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="sqlConnection" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="57">'SqlDbReader' contains field 'SqlDbReader.sqlConnection' that is of IDisposable type: 'SqlConnection'. Change the Dispose method on 'SqlDbReader' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetData(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="48">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'SqlDbReader.GetData(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SQLiteDbAbstract" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.IO.FileInfo)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="208">'SQLiteDbAbstract.SQLiteDbAbstract(string, FileInfo)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;SQLiteDbAbstract..ctor(String, FileInfo)&#xD;&#xA;SQLiteDbAbstract.ConnectToDB(String):Void&#xD;&#xA;SQLiteDbAbstract.Dispose():Void&#xD;&#xA;SQLiteDbAbstract.Dispose(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="sqlConnection" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="248">'SQLiteDbAbstract' contains field 'SQLiteDbAbstract.sqlConnection' that is of IDisposable type: 'SQLiteConnection'. Change the Dispose method on 'SQLiteDbAbstract' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SqLiteDbWrapper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Execute(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="347">The query string passed to 'SQLiteCommand.SQLiteCommand(string, SQLiteConnection)' in 'SqLiteDbWrapper.Execute(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetData(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="297">The query string passed to 'SQLiteCommand.SQLiteCommand(string, SQLiteConnection)' in 'SqLiteDbWrapper.GetData(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataTable(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Db" File="DbWrapper.cs" Line="305">The query string passed to 'SQLiteDataAdapter.SQLiteDataAdapter(string, SQLiteConnection)' in 'SqLiteDbWrapper.GetDataTable(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ASTA.Classes.People">
       <Types>
        <Type Name="ADUsers" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Info" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'ADUsers.Status&lt;TextEventArgs&gt;' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'ADUsers.Status&lt;TextEventArgs&gt;' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Trace" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'ADUsers.Status&lt;TextEventArgs&gt;' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'ADUsers.Status&lt;TextEventArgs&gt;' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserPrincipalExtended" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'UserPrincipalExtended' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'UserPrincipal', 'AuthenticablePrincipal', 'Principal'</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ASTA.Classes.Security">
       <Types>
        <Type Name="EncryptionDecryptionCriticalData" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#DecryptStringFromBytes(System.Byte[],System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Security" File="EncryptDecrypt.cs" Line="209">Object 'csDecrypt' can be disposed more than once in method 'EncryptionDecryptionCriticalData.DecryptStringFromBytes(byte[], byte[], byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 209</Issue>
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Security" File="EncryptDecrypt.cs" Line="209">Object 'msDecrypt' can be disposed more than once in method 'EncryptionDecryptionCriticalData.DecryptStringFromBytes(byte[], byte[], byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 209</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptStringToBytes(System.String,System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Security" File="EncryptDecrypt.cs" Line="164">Object 'csEncrypt' can be disposed more than once in method 'EncryptionDecryptionCriticalData.EncryptStringToBytes(string, byte[], byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 164</Issue>
             <Issue Certainty="75" Level="Warning" Path="D:\Yuri\myPRG\mySCA2\Classes\Security" File="EncryptDecrypt.cs" Line="164">Object 'msEncrypt' can be disposed more than once in method 'EncryptionDecryptionCriticalData.EncryptStringToBytes(string, byte[], byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 164</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ASTA.Classes.Updating">
       <Types>
        <Type Name="Uploader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="Breaking">
             <Issue Name="DisposeBoolSignature" Certainty="95" Level="Error" Path="D:\Yuri\myPRG\mySCA2\Classes\Updating" File="Uploader.cs" Line="190">Ensure that 'Uploader.Dispose(bool)' is declared as protected, virtual, and unsealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StatusColor" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2019-12-03 21:52:11Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Uploader.MarkerOfUploading' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ASTA.Properties">
       <Types>
        <Type Name="Resources" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="ExcludedInSource" Created="2019-12-03 21:52:11Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z" />
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405">
   <Name>COM visible type base types should be COM visible</Name>
   <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
   <Resolution Name="Default">{0} is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182202.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of {0} as an object named 'sender'.</Resolution>
   <Resolution Name="Second">Declare the second parameter of {0} as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 209</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeBoolSignature">Ensure that {0} is declared as protected, virtual, and unsealed.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
